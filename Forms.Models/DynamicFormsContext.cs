// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Forms.Models
{
    public partial class DynamicFormsContext : DbContext
    {
        public DynamicFormsContext()
        {
        }

        public DynamicFormsContext(DbContextOptions<DynamicFormsContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ControlType> ControlType { get; set; }
        public virtual DbSet<DataSourceCtrl> DataSourceCtrl { get; set; }
        public virtual DbSet<DataSources> DataSources { get; set; }
        public virtual DbSet<FrmAnswers> FrmAnswers { get; set; }
        public virtual DbSet<FrmForms> FrmForms { get; set; }
        public virtual DbSet<FrmQuestions> FrmQuestions { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ControlType>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CssClass).HasMaxLength(100);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<DataSourceCtrl>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataSourceId).HasColumnName("DataSource_id");

                entity.Property(e => e.QuestionId).HasColumnName("Question_id");

                entity.HasOne(d => d.DataSource)
                    .WithMany(p => p.DataSourceCtrl)
                    .HasForeignKey(d => d.DataSourceId)
                    .HasConstraintName("FK_DataSourceCtrl_DataSources");

                entity.HasOne(d => d.Question)
                    .WithMany(p => p.DataSourceCtrl)
                    .HasForeignKey(d => d.QuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataSourceCtrl_FrmQuestions1");
            });

            modelBuilder.Entity<DataSources>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Data).HasColumnName("data");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<FrmAnswers>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Answer).HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.QuestionId).HasColumnName("Question_id");

                entity.HasOne(d => d.Question)
                    .WithMany(p => p.FrmAnswers)
                    .HasForeignKey(d => d.QuestionId)
                    .HasConstraintName("FK_FrmAnswers_FrmQuestions");
            });

            modelBuilder.Entity<FrmForms>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescriptionAr).HasColumnName("Description_ar");

                entity.Property(e => e.DescriptionEn).HasColumnName("Description_en");

                entity.Property(e => e.TitleAr)
                    .HasMaxLength(50)
                    .HasColumnName("Title_ar");

                entity.Property(e => e.TitleEn)
                    .HasMaxLength(50)
                    .HasColumnName("Title_en");
            });

            modelBuilder.Entity<FrmQuestions>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ControlId).HasColumnName("Control_id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FormsId).HasColumnName("Forms_id");

                entity.Property(e => e.ParentId).HasColumnName("Parent_id");

                entity.Property(e => e.Question).HasMaxLength(50);

                entity.HasOne(d => d.Control)
                    .WithMany(p => p.FrmQuestions)
                    .HasForeignKey(d => d.ControlId)
                    .HasConstraintName("FK_FrmQuestions_ControlType");

                entity.HasOne(d => d.Forms)
                    .WithMany(p => p.FrmQuestions)
                    .HasForeignKey(d => d.FormsId)
                    .HasConstraintName("FK_FrmQuestions_FrmForms");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}